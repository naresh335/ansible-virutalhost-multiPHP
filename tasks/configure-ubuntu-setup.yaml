- name: Installing apache
  apt: 
    name: apache2
    state: present
  tags: always

- name: Install php repo
  ansible.builtin.shell: add-apt-repository --yes ppa:ondrej/php 
  tags: always

- name: Installing php 5.x
  apt:
    name: ["php{{php_version}}-common", "php{{php_version}}-cli", "php{{php_version}}-opcache", "php{{php_version}}-gd", "php{{php_version}}-mysql", "php{{php_version}}-curl", "php{{php_version}}-intl", "php{{php_version}}-xsl", "php{{php_version}}-mbstring", "php{{php_version}}-zip", "php{{php_version}}-gmp", "php{{php_version}}-mongodb", "php{{php_version}}-bcmath", "php{{php_version}}-soap", "php{{php_version}}-xml", "php{{php_version}}-json", "php{{php_version}}-bz2", "php{{php_version}}-fpm"] 
    state: present
  tags: fpm, always
  when: php_version.find("5") != -1

- name: Installing php 7.x
  apt:
    name: ["php{{php_version}}-common", "php{{php_version}}-cli", "php{{php_version}}-opcache", "php{{php_version}}-gd", "php{{php_version}}-mysql", "php{{php_version}}-curl", "php{{php_version}}-intl", "php{{php_version}}-xsl", "php{{php_version}}-mbstring", "php{{php_version}}-zip", "php{{php_version}}-gmp", "php{{php_version}}-mongodb", "php{{php_version}}-bcmath", "php{{php_version}}-soap", "php{{php_version}}-xml", "php{{php_version}}-json", "php{{php_version}}-bz2", "php{{php_version}}-fpm"] 
    state: present
  tags: fpm, always
  when: php_version.find("7") != -1

- name: Installing php 8.x
  apt:
    name: ["php{{php_version}}-common", "php{{php_version}}-cli", "php{{php_version}}-opcache", "php{{php_version}}-gd", "php{{php_version}}-mysql", "php{{php_version}}-curl", "php{{php_version}}-intl", "php{{php_version}}-xsl", "php{{php_version}}-mbstring", "php{{php_version}}-zip", "php{{php_version}}-gmp", "php{{php_version}}-mongodb", "php{{php_version}}-bcmath", "php{{php_version}}-soap", "php{{php_version}}-xml", "php{{php_version}}-bz2", "php{{php_version}}-fpm"] 
    state: present
  tags: fpm, always
  when: php_version.find("8") != -1

- name: Check if changephp is already defined
  lineinfile:
    state: absent
    path: "/home/{{user}}/.bashrc"
    regexp: "changephp"
  check_mode: true
  register: check_changephp
  tags: always

- name: Setting changephp if undefined
  lineinfile:
    state: present
    path: "/home/{{user}}/.bashrc"
    line: "alias changephp='sudo update-alternatives --config php'"
  when: check_changephp.found == 0
  tags: always

- name: Enabling fpm dependency modules 
  apache2_module:
    name: "{{item}}" 
    state: present
  loop: ["proxy_fcgi","rewrite"]
  tags: always

- name: Configuring apache to use fpm 
  copy:
    src: 000-default.conf
    dest: "/etc/apache2/sites-available/{{url}}.conf"
    owner: root
    group: root
    mode: 0644
  tags: change-url, always

- name: Updating apache config files
  replace:
    dest: "/etc/apache2/sites-available/{{url}}.conf"
    regexp: 'php_version'
    replace: '{{php_version}}'
  tags: replace,change-url, always

- name: Setting Project url in apache config
  replace:
    dest: "/etc/apache2/sites-available/{{url}}.conf"
    regexp: 'url'
    replace: '{{url}}'
  tags: change-url, always

- name: Setting Project url in apache config
  replace:
    dest: "/etc/apache2/sites-available/{{url}}.conf"
    regexp: 'projects'
    replace: '{{directory}}'
  tags: replace, always

- name: Adding Project directory to apache config
  replace:
    dest: "/etc/apache2/sites-available/{{url}}.conf"
    regexp: 'username'
    replace: '{{user}}'
  tags: replace,change-url, always

- name: Enabling new site "{{url}}"
  file:
    src: "/etc/apache2/sites-available/{{url}}.conf"
    dest: "/etc/apache2/sites-enabled/{{url}}.conf"
    owner: root
    group: root
    state: link
  tags: change-url, always

- name: Removing old site "{{old_url}}"
  file:
    path: "{{item}}"
    state: absent
  loop: ["/etc/apache2/sites-enabled/{{old_url}}.conf","/etc/apache2/sites-available/{{old_url}}.conf"]
  tags: never, remove-url

- name: Delete entry in hostfile 
  lineinfile: 
    path: /etc/hosts
    regexp: "127.0.0.1 {{old_url}}"
    state: absent
   
  tags: never,remove-url

- name: Configuring fpm service
  copy:
    src: www.conf
    dest: "/etc/php/{{php_version}}/fpm/pool.d/{{user}}-user.conf"
    owner: root
    group: root
    mode: 0644
  tags: always

- name: Updating fpm config files
  replace:
    dest: "/etc/php/{{php_version}}/fpm/pool.d/{{user}}-user.conf"
    regexp: 'www-data'
    replace: "{{user}}"
  tags: fpm, always

- name: Customizing listening socket 
  replace:
    dest: "/etc/php/{{php_version}}/fpm/pool.d/{{user}}-user.conf"
    regexp: 'php_version'
    replace: "{{php_version}}"
  tags: fpm,change-url,always

- name: Check if "{{url}}" is already defined in hostfile
  lineinfile:
    state: absent
    path: "/etc/hosts"
    regexp: "{{url}}"
  check_mode: true
  register: check
  tags: change-url,always

- name: Setting "{{url}}" if undefined
  lineinfile:
    state: present
    path: "/etc/hosts"
    line: "127.0.0.1 {{url}}"
  when: check.found == 0
  tags: change-url,always

- name: Adding user into www-data group
  user:
    name: www-data
    groups: "{{user}}"
    append: true
  tags: always

- name: Creating project Directory "/home/{{user}}/{{directory}}/{{url}}"
  file:
    path: "{{item}}"
    state: directory
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0755
  loop:
    - "/home/{{user}}/{{directory}}/{{url}}/public"
    - "/home/{{user}}/{{directory}}/logs"
  tags: change-url,always

- name: Copying test file for dumping phpinfo
  copy:
    src: p.php
    dest: "/home/{{user}}/{{directory}}/{{url}}/public/index.php"
    owner: "{{user}}"
    group: "{{user}}" 
    mode: 0644
  tags: never, phpinfo, change-url

- name: Checking if project directory is empty
  stat:
    path: "/home/{{user}}/{{directory}}/{{url}}/public/index.php"
  register: project_already_installed
  tags: never, phpmyadmin, wordpress

- name: project installation failed, check if project directory is empty
  debug: var=project_already_installed.stderr_lines
  when: project_already_installed.stderr_lines is defined
  tags: never, phpmyadmin, wordpress

- name: Installing phpmyadmin
  ansible.builtin.unarchive:
    src: https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-english.tar.xz
    dest: "/home/{{user}}/{{directory}}/{{url}}/public/"
    remote_src: yes
    extra_opts: [--strip-components=1]
    owner: "{{user}}"
    group: "{{user}}" 
  when: not project_already_installed.stat.exists
  tags: never, phpmyadmin

- name: Installing wordpress
  ansible.builtin.unarchive:
    src: https://wordpress.org/latest.tar.gz
    dest: "/home/{{user}}/{{directory}}/{{url}}/public/"
    remote_src: yes
    extra_opts: [--strip-components=1]
    owner: "{{user}}"
    group: "{{user}}" 
  when: not project_already_installed.stat.exists
  tags: never, wordpress

- name: Check if composer is already installed
  stat:
    path: /usr/local/bin/composerv2
  register: composerv2_installed
  tags: always, laravel, laravel_version

- name: Installing Composer as laravel dependency
  shell: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composerv2
  when: not composerv2_installed.stat.exists
  tags: never, laravel, laravel_version

- name: Making Composer Executable
  shell: chmod a+x /usr/local/bin/composerv2
  when: not composerv2_installed.stat.exists
  tags: never, laravel, laravel_version

- name: Composer Self Update
  shell: composerv2 self-update
  tags: never, laravel, laravel_version

- name: Removing public directory if empty
  shell: rmdir "/home/{{user}}/{{directory}}/{{url}}/public"
  ignore_errors: true
  tags: never, laravel, laravel_version

- name: Installing laravel
  shell: composerv2 create-project laravel/laravel "/home/{{user}}/{{directory}}/{{url}}"
  register: command_result
  become_user: "{{user}}"
  failed_when: "'FAILED' in command_result.stderr"
  tags: never, laravel

- name: Installing laravel version {{laravel_version}}
  shell: composerv2 create-project --prefer-dist laravel/laravel "/home/{{user}}/{{directory}}/{{url}}" "{{laravel_version}}"
  register: command_result
  become_user: "{{user}}"
  failed_when: "'FAILED' in command_result.stderr"
  tags: never, laravel_version

- name: Laravel installation failed, check if project directory is empty
  debug: var=command_result.stderr_lines
  when: command_result.stderr_lines is defined
  tags: never, laravel, laravel_version

- name: Reloading service to take changes effect
  service:
    name: "{{item}}"
    state: reloaded
  loop: ["php{{php_version}}-fpm",apache2]
  tags: reload, services, change-url, always

- name: Reloading apache service to take changes effect
  service:
    name: "{{item}}"
    state: reloaded
  loop: [apache2]
  tags: never, services, remove-url
